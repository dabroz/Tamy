<<SHADER_COMPUTE_HLSL>><<SHADER_ROUTINE_END>><<SHADER_COMPUTE_GLSL>><<SHADER_ROUTINE_END>><<SHADER_VERTEX_HLSL>>// ----------------------------------------------------------------------------
// Input/Output structures
// ----------------------------------------------------------------------------
struct VSInput
{
	float4 vPosition : POSITION;
	float3 vNormal : NORMAL;
	float3 vTangent : TANGENT;
	float2 vUV0 : TEXCOORD0;
};

struct VSOutput
{
	float4 positionCS : POSITION;
	float4 positionVS : TEXCOORD0;
	float3 normalVS : TEXCOORD1;
	float3 tangentVS : TEXCOORD2;
	float2 uv0 : TEXCOORD3;
};

// ----------------------------------------------------------------------------
// Constants
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Globals
// ----------------------------------------------------------------------------

uniform float4x4		Transform_004;
uniform float4x4		Transform_005;
// ----------------------------------------------------------------------------
// Samplers
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Functions
// ----------------------------------------------------------------------------


// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------

VSOutput main( VSInput In )
{
	VSOutput Out = (VSOutput)0;

	float4 Output_006 = mul( In.vPosition, Transform_004 );
	float3 Output_007 = mul( In.vTangent, (float3x3)Transform_005 ) ;
	float4 Output_008 = mul( In.vPosition, Transform_005 );
	float3 Output_009 = mul( In.vNormal, (float3x3)Transform_005 ) ;
	Out.positionCS = Output_006;
	Out.positionVS = Output_008;
	Out.normalVS = Output_009;
	Out.tangentVS = Output_007;
	Out.uv0 = In.vUV0;
	return Out;
}
<<SHADER_ROUTINE_END>><<SHADER_VERTEX_GLSL>>#version 330 core// ----------------------------------------------------------------------------
// Input/Output structures
// ----------------------------------------------------------------------------
// struct VSInput start

layout(location = 0) in vec4 vPosition;
layout(location = 1) in vec3 vNormal;
layout(location = 2) in vec3 vTangent;
layout(location = 3) in vec2 vUV0;
// struct VSInput end

// struct VSOutput start

smooth out vec4 positionVS;
smooth out vec3 normalVS;
smooth out vec3 tangentVS;
smooth out vec2 uv0;
// struct VSOutput end

// ----------------------------------------------------------------------------
// Constants
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Globals
// ----------------------------------------------------------------------------

uniform mat4		Transform_004;
uniform mat4		Transform_005;
// ----------------------------------------------------------------------------
// Samplers
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Functions
// ----------------------------------------------------------------------------


// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------

void main()
{
	vec4 Output_006 = (vPosition * Transform_004);
	vec3 Output_007 = ( vTangent * mat3( Transform_005 ) );
	vec4 Output_008 = (vPosition * Transform_005);
	vec3 Output_009 = ( vNormal * mat3( Transform_005 ) );
	gl_Position = Output_006;
	positionVS = Output_008;
	normalVS = Output_009;
	tangentVS = Output_007;
	uv0 = vUV0;
}
<<SHADER_ROUTINE_END>><<SHADER_TESS_CONTROL_HLSL>><<SHADER_ROUTINE_END>><<SHADER_TESS_CONTROL_GLSL>><<SHADER_ROUTINE_END>><<SHADER_TESS_EVALUATION_HLSL>><<SHADER_ROUTINE_END>><<SHADER_TESS_EVALUATION_GLSL>><<SHADER_ROUTINE_END>><<SHADER_GEOMETRY_HLSL>><<SHADER_ROUTINE_END>><<SHADER_GEOMETRY_GLSL>><<SHADER_ROUTINE_END>><<SHADER_FRAGMENT_HLSL>>// @file	/Renderer/Shaders/RenderingPipeline/selectionShader.hlsl
// @brief	<put the description here>


uniform float4 g_color;

float4 main() : COLOR0
{
	return g_color;
}
<<SHADER_ROUTINE_END>><<SHADER_FRAGMENT_GLSL>>// @file	/Renderer/Shaders/RenderingPipeline/selectionShader.glsl
// @brief	<put the description here>
#version 330 core

layout(location=0) out vec4 vFragColor;
uniform FragmentShaderConstants
{
	vec4 g_color;
};

void main()
{
	vFragColor = g_color;
}
<<SHADER_ROUTINE_END>>