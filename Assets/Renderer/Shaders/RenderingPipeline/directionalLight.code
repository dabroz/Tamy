<<SHADER_VERTEX_GLSL>>#version 330 core
// @file	/Renderer/Shaders/RenderingPipeline/directionalLight.code
// @brief	<put the description here>

layout(location=0) in vec2 vPosition;

smooth out vec2 UV;

void main( )
{
	// a simple pass through shader - we're rendering a full screen quad after all
	gl_Position = vec4(vPosition*2.0-1,0,1);
	UV = vPosition;
}
<<SHADER_ROUTINE_END>><<SHADER_TESS_CONTROL_GLSL>><<SHADER_ROUTINE_END>><<SHADER_TESS_EVALUATION_GLSL>><<SHADER_ROUTINE_END>><<SHADER_GEOMETRY_GLSL>><<SHADER_ROUTINE_END>><<SHADER_FRAGMENT_GLSL>>#version 330 core
// @file	/Renderer/Shaders/RenderingPipeline/directionalLight.code
// @brief	<put the description here>

#define MAX_CSD_KERNEL_SIZE			32
#define SHADOW_CASCADES_COUNT		4
#define CASCADE_BLEND_DISTANCE		3.0
#define SHADOW_TOLERANCE_DISTANCE   0.0005

smooth in vec2 UV;
layout(location=0) out vec4 vFragColor;

uniform sampler2D g_DepthBuffer;
uniform sampler2D g_Diffuse;
uniform sampler2D g_Specular;
uniform sampler2D g_BRDF;
uniform sampler2D g_Normals;
uniform sampler2D g_RoughnessLookup;
uniform sampler2D g_ShadowMap;
uniform sampler2D g_NoiseMap;

// DEBUG DATA
const vec4 cascadeColor[4] = vec4[4](
	vec4(1,0,0,1), 
	vec4(0,1,0,1), 
	vec4(0,0,1,1), 
	vec4(0.5,0.5,0,1) 
);

uniform LightProperties
{
	vec4				m_camProjParams;
	mat4				m_invViewMtx;
	mat4 				m_camViewToLightProjMtx[SHADOW_CASCADES_COUNT];
	vec2				m_cascadeOffset[SHADOW_CASCADES_COUNT];
	vec4				m_cascadeMin[SHADOW_CASCADES_COUNT];
	vec4				m_cascadeMax[SHADOW_CASCADES_COUNT];
	vec4				m_cascadeDistance;
	// -------------------------   16 bytes boundary ---------------------------
	vec4                m_kernel[MAX_CSD_KERNEL_SIZE];
	//----------------------------------- (16 byte boundary)
	vec4				m_direction;
	//----------------------------------- (16 byte boundary)
	vec4				m_lightColor;
	//----------------------------------- (16 byte boundary)
	int 				m_sampleKernelSize;
	int					m_padding[3];
	//----------------------------------- (16 byte boundary)
};

#include "/Renderer/Shaders/RenderingPipeline/lightingModel.code"
#include "/Renderer/Shaders/RenderingPipeline/math.code"


int CalculateCascadeIdx( vec4 ptViewSpace )
{
	vec4 ptWorldSpace = m_invViewMtx * ptViewSpace;
	vec4 penetration;
	penetration.x = isInsideAAB( ptWorldSpace, m_cascadeMin[0], m_cascadeMax[0] );
	penetration.y = isInsideAAB( ptWorldSpace, m_cascadeMin[1], m_cascadeMax[1] );
	penetration.z = isInsideAAB( ptWorldSpace, m_cascadeMin[2], m_cascadeMax[2] );
	penetration.w = isInsideAAB( ptWorldSpace, m_cascadeMin[3], m_cascadeMax[3] );
	penetration = max( vec4(0), sign( penetration ) );
	
	penetration.y += penetration.x;
	penetration.z += penetration.y;
	penetration.w += penetration.z;
	penetration = clamp( penetration, vec4(0), vec4(1) );

	return SHADOW_CASCADES_COUNT - int(dot(penetration,penetration));
}

float CalcShadowFactor( in mat3 kernelBasis, in vec4 P0_cv, in int cascadeIdx )
{
	float distanceFactor = P0_cv.z / m_cascadeDistance.w;
	
	float factor = 0.0;
	vec4 P0_lp;
	vec2 shadowMapCoords;
	vec3 samplePosViewSpace;
	for (int i = 0; i < m_sampleKernelSize; ++i) 
	{
		//	get sample position:
		samplePosViewSpace = kernelBasis * m_kernel[i].xyz;
		samplePosViewSpace = samplePosViewSpace * distanceFactor + P0_cv.xyz;
		
		// transform it to projection space
		P0_lp = m_camViewToLightProjMtx[cascadeIdx] * vec4(samplePosViewSpace,1);
		
		// and finally - to the texture space
		shadowMapCoords = CalcTexCoords( P0_lp );
		shadowMapCoords = shadowMapCoords * 0.5 + m_cascadeOffset[cascadeIdx];
		
		//	get sample depth:
		float decodedDepth = texture(g_ShadowMap, shadowMapCoords).r * 2.0f - 1.0f;	
		factor += step( P0_lp.z - SHADOW_TOLERANCE_DISTANCE, decodedDepth );
	}
	factor /= float(m_sampleKernelSize);
	return factor;
}

void main()
{
	vec2 texCoords = UV;
	vec4 brdf = texture( g_BRDF, texCoords );
	vec3 N = DecodeNormal( texCoords );
	float originalDepth = texture(g_DepthBuffer, texCoords).r;
	vec4 P = DecodeViewPosition( texCoords, originalDepth, m_camProjParams );
	if ( originalDepth > 0.99999)
	{
		discard;
	}

	// check the index of the active cascadeIdx
	int cascadeIdx = CalculateCascadeIdx( P );
	
	//	construct kernel basis matrix:
	vec2 noiseTexCoords = vec2(textureSize(g_DepthBuffer, 0) / textureSize(g_NoiseMap, 0));
	vec3 rvec = texture(g_NoiseMap, noiseTexCoords).rgb * 2.0 - 1.0;
	vec3 tangent = normalize(rvec - N * dot(rvec, N));
	vec3 bitangent = cross(tangent, N);
	mat3 kernelBasis = mat3(tangent, bitangent, N);

	float shadowFactor = 1.0;
	if ( cascadeIdx < SHADOW_CASCADES_COUNT )
	{
		shadowFactor = CalcShadowFactor( kernelBasis, P, cascadeIdx );
	}
	
	// compute the lighting
	vec3 L = -m_direction.xyz;
	LightingResult result = ComputeLighting( P, N, L, brdf );
	vec4 specularColor = result.m_specular * texture( g_Specular, texCoords );
	vec4 albedo = texture( g_Diffuse, texCoords );
	vec4 diffuseColor = result.m_diffuse * albedo;
	vFragColor = clamp( (diffuseColor + specularColor)*shadowFactor, 0.0, 1.0 );
	
	// DEBUG code for visualizing the bounds of each cascade region
	// vFragColor *= cascadeColor[cascadeIdx];
	
	// DEBUG overlay the shadow map texture over the rendered screen
	// vFragColor = vFragColor * texture( g_ShadowMap, texCoords ).r;
	
}<<SHADER_ROUTINE_END>>
