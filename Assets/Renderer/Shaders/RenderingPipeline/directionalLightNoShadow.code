<<SHADER_VERTEX_GLSL>>#version 330 core
// @file	/Renderer/Shaders/RenderingPipeline/directionalLightNoShadow.code
// @brief	<put the description here>

layout(location=0) in vec2 vPosition;

smooth out vec2 UV;

void main( )
{
	// a simple pass through shader - we're rendering a full screen quad after all
	gl_Position = vec4(vPosition*2.0-1,0,1);
	UV = vPosition;
}
<<SHADER_ROUTINE_END>><<SHADER_TESS_CONTROL_GLSL>><<SHADER_ROUTINE_END>><<SHADER_TESS_EVALUATION_GLSL>><<SHADER_ROUTINE_END>><<SHADER_GEOMETRY_GLSL>><<SHADER_ROUTINE_END>><<SHADER_FRAGMENT_GLSL>>#version 330 core
// @file	/Renderer/Shaders/RenderingPipeline/directionalLightNoShadow.code
// @brief	<put the description here>

#define SHADOW_CASCADES_COUNT		4
#define MAX_CSD_KERNEL_SIZE			32

smooth in vec2 UV;
layout(location=0) out vec4 vFragColor;

uniform sampler2D g_DepthBuffer;
uniform sampler2D g_Diffuse;
uniform sampler2D g_Specular;
uniform sampler2D g_BRDF;
uniform sampler2D g_Normals;
uniform sampler2D g_RoughnessLookup;
uniform sampler2D g_ShadowMap;


uniform LightProperties
{
	vec4				m_camProjParams;
	mat4				m_invViewMtx;
	mat4 				m_camViewToLightProjMtx[SHADOW_CASCADES_COUNT];
	vec2				m_cascadeOffset[SHADOW_CASCADES_COUNT];
	vec4				m_cascadeMin[SHADOW_CASCADES_COUNT];
	vec4				m_cascadeMax[SHADOW_CASCADES_COUNT];
	vec4				m_cascadeDistance;
	// -------------------------   16 bytes boundary ---------------------------
	vec4                m_kernel[MAX_CSD_KERNEL_SIZE];
	//----------------------------------- (16 byte boundary)
	vec4				m_direction;
	//----------------------------------- (16 byte boundary)
	vec4				m_lightColor;
	//----------------------------------- (16 byte boundary)
	int 				m_sampleKernelSize;
	int					m_padding[3];
	//----------------------------------- (16 byte boundary)
};

#include "/Renderer/Shaders/RenderingPipeline/lightingModel.code"

void main()
{
	vec2 texCoords = UV;
	vec4 brdf = texture( g_BRDF, texCoords );
	vec3 N = DecodeNormal( texCoords );
	float originalDepth = texture(g_DepthBuffer, texCoords).r;
	vec4 P = DecodeViewPosition( texCoords, originalDepth, m_camProjParams );
	if ( originalDepth > 0.99999)
	{
		discard;
	}
	
	vec3 L = -m_direction.xyz;
	LightingResult result = ComputeLighting( P, N, L, brdf );

	vec4 albedo = texture( g_Diffuse, texCoords );
	vec4 specularColor = result.m_specular * texture( g_Specular, texCoords );
	vec4 diffuseColor = result.m_diffuse * albedo;
		
	vFragColor = clamp(diffuseColor + specularColor, 0.0, 1.0 );
	
	vFragColor.a = albedo.a;

}
<<SHADER_ROUTINE_END>>