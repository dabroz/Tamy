
<<SHADER_VERTEX_GLSL>>#version 330 core
// @file	/Renderer/Shaders/RenderingPipeline/spotLightWithShadow.code
// @brief	<put the description here>

layout(location = 0) in vec4 vPosition;

uniform VertexShaderConstants
{
	mat4			m_modelToProj;
};

smooth out vec4 	vProjPos;

void main()
{
    vec4 WVP_Pos = m_modelToProj * vPosition;
    gl_Position = WVP_Pos;
	vProjPos = WVP_Pos;
} 

<<SHADER_ROUTINE_END>><<SHADER_TESS_CONTROL_GLSL>><<SHADER_ROUTINE_END>><<SHADER_TESS_EVALUATION_GLSL>><<SHADER_ROUTINE_END>><<SHADER_GEOMETRY_GLSL>><<SHADER_ROUTINE_END>><<SHADER_FRAGMENT_GLSL>>#version 330 core
// @file	/Renderer/Shaders/RenderingPipeline/spotLightWithShadow.code
// @brief	<put the description here>

smooth in vec4 	vProjPos;
layout(location=0) out vec4 vFragColor;

uniform sampler2D g_DepthBuffer;
uniform sampler2D g_Diffuse;
uniform sampler2D g_Specular;
uniform sampler2D g_BRDF;
uniform sampler2D g_Normals;
uniform sampler2D g_RoughnessLookup;
uniform sampler2D g_ShadowMap;

uniform LightProperties
{
   vec4                             m_camProjParams;
   vec4                             m_lightProjParams;
   mat4 							m_camViewToLightProjMtx;
   //----------------------------------- (16 byte boundary)
   vec4                             m_position;
   //----------------------------------- (16 byte boundary)
   vec4                             m_direction;
   //----------------------------------- (16 byte boundary)
   vec4                             m_lightColor;
   //----------------------------------- (16 byte boundary)
   float                            m_range;
   float                            m_falloff;
   float							m_spotAngle;
   int								m_padding;
   //----------------------------------- (16 byte boundary)
};

float DoAttenuation( float d )
{
  return pow(max(0.0, 1.0 - (d / m_range)), m_falloff + 1.0);
}

float DoSpotCone( vec3 L )
{
  float spotMinAngle = cos( m_spotAngle );
  float spotMaxAngle = ( spotMinAngle + 1.0f ) / 2.0f;
  float cosAngle = dot( m_direction.xyz, L );
  return smoothstep( spotMinAngle, spotMaxAngle, cosAngle );
}

#include "/Renderer/Shaders/RenderingPipeline/lightingModel.code"

float CalcShadowFactor( in vec4 P0_cv )
{
	vec2 texelSize = 1.0 / vec2(textureSize(g_ShadowMap, 0));
	vec4 P0_lp = m_camViewToLightProjMtx * P0_cv;
	
	vec2 shadowMapCoords = CalcTexCoords( P0_lp );

	float decodedDepth = texture(g_ShadowMap, shadowMapCoords ).r * 2.0f - 1.0f;
    float viewDepth = m_lightProjParams.w / (decodedDepth - m_lightProjParams.z);

	float factor = step( P0_lp.z - 0.005, viewDepth );
	
	factor = clamp( factor, 0.0, 1.0 );
	return factor;
}

void main()
{
	vec2 texCoords = ( vProjPos.xy / vProjPos.w ) * 0.5 + 0.5;
	vec4 brdf = texture( g_BRDF, texCoords );
	vec3 N = DecodeNormal( texCoords );
	float originalDepth = texture(g_DepthBuffer, texCoords).r;
	vec4 P = DecodeViewPosition( texCoords, originalDepth, m_camProjParams );
	if ( originalDepth > 0.99999)
	{
		discard;
	}
	
	vec4 albedo = texture( g_Diffuse, texCoords );
	
	float shadowFactor = CalcShadowFactor( P );
	if ( shadowFactor > 0.0 )
	{
		// light direction
		vec3 L = ( m_position - P ).xyz;
		float distance = length(L);
		L = L / distance;
		
		LightingResult result = ComputeLighting( P, N, L, brdf );
		
		float attenuation = DoAttenuation( distance );
		float spotIntensity = DoSpotCone( -L );
		
		vec4 specularColor = result.m_specular * texture( g_Specular, texCoords ) * attenuation * spotIntensity;
		vec4 diffuseColor = result.m_diffuse * albedo * attenuation * spotIntensity;
			
		vFragColor = clamp((diffuseColor + specularColor)*shadowFactor, 0.0, 1.0 );
	}
	else
	{
		vFragColor = vec4(0);
	}
	vFragColor.a = albedo.a;
}
<<SHADER_ROUTINE_END>>