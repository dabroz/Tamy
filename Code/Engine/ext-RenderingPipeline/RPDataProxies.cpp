#include "ext-RenderingPipeline\RPDataProxies.h"


///////////////////////////////////////////////////////////////////////////////

BEGIN_ABSTRACT_OBJECT( LightsArray );
   PARENT( ReflectionObject );
END_OBJECT();

///////////////////////////////////////////////////////////////////////////////

LightsArray::LightsArray( uint initialCapacity )
   : m_collection( initialCapacity )
{
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

BEGIN_ABSTRACT_OBJECT( GeometryArray );
   PARENT( ReflectionObject );
END_OBJECT();

///////////////////////////////////////////////////////////////////////////////

GeometryArray::GeometryArray( uint initialCapacity )
   : m_collection( initialCapacity )
{
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

BEGIN_ABSTRACT_OBJECT( RPBoundingVolume );
   PARENT( ReflectionObject );
END_OBJECT();

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

BEGIN_ABSTRACT_OBJECT( RPVolFrustum );
   PARENT( RPBoundingVolume );
END_OBJECT();


///////////////////////////////////////////////////////////////////////////////

bool RPVolFrustum::testIntersection( const AxisAlignedBox& aab ) const
{
   return m_volume.isInside( aab );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

BEGIN_ABSTRACT_OBJECT( RPVolAxisAlignedBox );
   PARENT( RPBoundingVolume );
END_OBJECT();

///////////////////////////////////////////////////////////////////////////////

bool RPVolAxisAlignedBox::testIntersection( const AxisAlignedBox& aab ) const
{
   return m_volume.testIntersection( aab );
}

///////////////////////////////////////////////////////////////////////////////
