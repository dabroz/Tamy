#include "ml-Blender\BlenderMaterialNodesLayout.h"
#include "core-Renderer\MaterialNode.h"


///////////////////////////////////////////////////////////////////////////////

void BlenderMaterialNodesLayout::arrangeNodes()
{
   Vector initialPosition = Vector_ZERO;
   calculate( initialPosition );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

BMNCompositeItem::~BMNCompositeItem()
{
   for ( List< BlenderMaterialNodesLayout* >::iterator it = m_childLayouts.begin(); !it.isEnd(); ++it )
   {
      BlenderMaterialNodesLayout* item = *it;
      delete item;
   }

   m_childLayouts.clear();

}

///////////////////////////////////////////////////////////////////////////////

void BMNCompositeItem::add( BlenderMaterialNodesLayout* layout )
{
   m_childLayouts.pushBack( layout );
}

///////////////////////////////////////////////////////////////////////////////

void BMNCompositeItem::add( MaterialNode* node )
{
   m_childLayouts.pushBack( new BMNNodeItem( node ) );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

void BMNHorizLayout::calculate( Vector& inOutPosition )
{
   Vector offset( 300.0f, 0.0f, 0.0f );

   for ( List< BlenderMaterialNodesLayout* >::iterator it = m_childLayouts.begin(); !it.isEnd(); ++it )
   {
      BlenderMaterialNodesLayout* item = *it;

      item->calculate( inOutPosition );
      inOutPosition.add( offset );
   }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

void BMNVertLayout::calculate( Vector& inOutPosition )
{
   Vector offset( 0.0f, 75.0f, 0.0f );

   // we're gonna want to restore the vertical offset at the end, so memorize it
   float y = inOutPosition[1];

   for ( List< BlenderMaterialNodesLayout* >::iterator it = m_childLayouts.begin(); !it.isEnd(); ++it )
   {
      BlenderMaterialNodesLayout* item = *it;

      item->calculate( inOutPosition );
      inOutPosition.add( offset );
   }

   // restore the vertical offset
   inOutPosition[1] = y;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

BMNNodeItem::BMNNodeItem( MaterialNode* node )
   : m_node( node )
{
}

///////////////////////////////////////////////////////////////////////////////

BMNNodeItem::~BMNNodeItem()
{
   // don't delete the node - it's not ours to do so
   m_node = NULL;
}

///////////////////////////////////////////////////////////////////////////////

void BMNNodeItem::calculate( Vector& inOutPosition )
{
   m_node->setPosition( inOutPosition );
}

///////////////////////////////////////////////////////////////////////////////
