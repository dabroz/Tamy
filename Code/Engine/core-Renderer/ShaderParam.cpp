#include "core-Renderer\ShaderParam.h"
#include "core-Renderer\ShaderDataBuffer.h"
#include "core-Renderer\ProceduralTexture.h"
#include "core-Renderer\CubeTexture.h"
#include "core-Renderer\RenderTarget2D.h"
#include "core-Renderer\Texture.h"
#include "core-Renderer\RenderTargetCube.h"
#include "core\Assert.h"


///////////////////////////////////////////////////////////////////////////////

ShaderParamTexture::ShaderParamTexture( const IDString& nameId, Texture* val, const TextureSamplerSettings& samplerSettings )
   : m_name( nameId )
   , m_val( val )
   , m_samplerSettings( samplerSettings )
{
   m_val->addReference();
}

///////////////////////////////////////////////////////////////////////////////

ShaderParamTexture::~ShaderParamTexture()
{
   m_val->removeReference();
}


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

ShaderParamCubeTexture::ShaderParamCubeTexture( const IDString& nameId, CubeTexture* val, const TextureSamplerSettings& samplerSettings )
   : m_name( nameId )
   , m_val( val )
   , m_samplerSettings( samplerSettings )
{
   m_val->addReference();
}

///////////////////////////////////////////////////////////////////////////////

ShaderParamCubeTexture::~ShaderParamCubeTexture()
{
   m_val->removeReference();
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

ShaderParamRenderTarget2D::ShaderParamRenderTarget2D( const IDString& nameId, RenderTarget2D* val, const TextureSamplerSettings& samplerSettings, byte renderTextureIdx )
   : m_name( nameId )
   , m_val( val )
   , m_samplerSettings( samplerSettings )
   , m_renderTextureIdx( renderTextureIdx )
{
   m_val->addReference();
}

///////////////////////////////////////////////////////////////////////////////

ShaderParamRenderTarget2D::~ShaderParamRenderTarget2D()
{
   m_val->removeReference();
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

ShaderParamDepthBuffer2D::ShaderParamDepthBuffer2D( const IDString& nameId, RenderTarget2D* renderTarget )
   : m_name( nameId )
   , m_val( renderTarget )
{
   m_val->addReference();
}

///////////////////////////////////////////////////////////////////////////////

ShaderParamDepthBuffer2D::~ShaderParamDepthBuffer2D()
{
   m_val->removeReference();
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

ShaderParamRenderTargetCube::ShaderParamRenderTargetCube( const IDString& nameId, RenderTargetCube* val, const TextureSamplerSettings& samplerSettings )
   : m_name( nameId )
   , m_val( val )
   , m_samplerSettings( samplerSettings )
{
   m_val->addReference();
}

///////////////////////////////////////////////////////////////////////////////

ShaderParamRenderTargetCube::~ShaderParamRenderTargetCube()
{
   m_val->removeReference();
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

ShaderParamProceduralTexture::ShaderParamProceduralTexture( const IDString& nameId, ProceduralTexture* val, const TextureSamplerSettings& samplerSettings )
   : m_name( nameId )
   , m_val( val )
   , m_samplerSettings( samplerSettings )
{
   m_val->addReference();
}

///////////////////////////////////////////////////////////////////////////////

ShaderParamProceduralTexture::~ShaderParamProceduralTexture()
{
   m_val->removeReference();
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

ShaderParamDataBuf::ShaderParamDataBuf( const IDString& nameId, ShaderDataBuffer* dataBuf )
   : m_name( nameId )
   , m_dataBuf( dataBuf )
   , m_data( dataBuf->getSize() )
{
   m_dataBuf->addReference();

   m_data.resize( dataBuf->getSize(), 0 );
   dataBuf->copy( (byte*)m_data );
}

///////////////////////////////////////////////////////////////////////////////

ShaderParamDataBuf::~ShaderParamDataBuf()
{
   m_dataBuf->removeReference();
   m_dataBuf = NULL;
}

///////////////////////////////////////////////////////////////////////////////
