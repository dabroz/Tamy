#include "core-Renderer\RQWorldPosition.h"
#include "core-Renderer\RendererSelectionListener.h"
#include "core-Renderer\Renderer.h"


///////////////////////////////////////////////////////////////////////////////

RQWorldPosition::RQWorldPosition( const Point& viewportPos, RendererSelectionListener* listener )
   : m_viewportPos( viewportPos )
   , m_listener( listener )
{
}

///////////////////////////////////////////////////////////////////////////////

void RQWorldPosition::execute( Renderer& renderer, RenderTarget2D* queryRT )
{
   new ( renderer.rtComm() ) RCQueryWorldPosition( m_viewportPos, queryRT, m_listener );
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

RCQueryWorldPosition::RCQueryWorldPosition( const Point& viewportPos, const RenderTarget2D* renderTarget, RendererSelectionListener* listener )
   : m_viewportPos( viewportPos )
   , m_renderTarget( renderTarget )
   , m_listener( listener )
{
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

RCMarshallWorldPositionQueryResults::RCMarshallWorldPositionQueryResults( RendererSelectionListener* listener )
   : m_listener( listener )
{}

///////////////////////////////////////////////////////////////////////////////

void RCMarshallWorldPositionQueryResults::execute( Renderer& renderer )
{
   m_listener->onWorldPositionClicked( m_worldPos );
}

///////////////////////////////////////////////////////////////////////////////
