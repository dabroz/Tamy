#include "core/Singleton.h"


///////////////////////////////////////////////////////////////////////////////

template< typename T >
T* TSingleton< T >::s_theInstance = 0;

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

SingletonsManager* SingletonsManager::s_theInstance = 0;

///////////////////////////////////////////////////////////////////////////////

SingletonsManager::SingletonsManager()
   : m_rootEntry( 0 )
{
}

///////////////////////////////////////////////////////////////////////////////

SingletonsManager::~SingletonsManager()
{
   for ( Entry* entry = m_rootEntry; entry != 0;  )
   {
      entry->deinitialize();

      Entry* toDelete = entry;
      entry = entry->m_next;
      delete toDelete;
   }

   m_rootEntry = 0;
}

///////////////////////////////////////////////////////////////////////////////

SingletonsManager& SingletonsManager::getInstance()
{
   if ( !s_theInstance )
   {
      s_theInstance = new SingletonsManager();
   }
   return *s_theInstance;
}

///////////////////////////////////////////////////////////////////////////////

void SingletonsManager::deinitialize()
{
   delete s_theInstance;
   s_theInstance = 0;
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

SingletonsManager::Entry::Entry()
   : m_next( 0 )
   , m_order( 65536 )
{
}

///////////////////////////////////////////////////////////////////////////////
