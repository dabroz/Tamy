#ifndef _POINT_H
#error "This file can only be included in Point.h"
#else

#include "core\Vector.h"


///////////////////////////////////////////////////////////////////////////////

void Point::set( int _x, int _y )
{
   x = _x;
   y = _y;
}

///////////////////////////////////////////////////////////////////////////////

void Point::toVector( Vector& outVec ) const
{
   outVec.set( ( float ) x, float( y ), 0.f );
}

///////////////////////////////////////////////////////////////////////////////

bool Point::operator==( const Point& rhs ) const
{
   return ( x == rhs.x ) && ( y == rhs.y );
}

///////////////////////////////////////////////////////////////////////////////

bool Point::operator!=( const Point& rhs ) const
{
   return !( *this == rhs );
}

///////////////////////////////////////////////////////////////////////////////

Point Point::operator-( const Point& rhs ) const
{
   Point newPt( x - rhs.x, y - rhs.y );
   return newPt;
}

///////////////////////////////////////////////////////////////////////////////

Point Point::operator+( const Point& rhs ) const
{
   Point newPt( x + rhs.x, y + rhs.y );
   return newPt;
}

///////////////////////////////////////////////////////////////////////////////

Point Point::operator*( int val ) const
{
   Point newPt( x * val, y * val );
   return newPt;
}

///////////////////////////////////////////////////////////////////////////////

void Point::operator+=( const Point& rhs )
{
   x += rhs.x;
   y += rhs.y;
}

///////////////////////////////////////////////////////////////////////////////

void Point::operator-=( const Point& rhs )
{
   x -= rhs.x;
   y -= rhs.y;
}

///////////////////////////////////////////////////////////////////////////////

void Point::operator*=( int val )
{
   x *= val;
   y *= val;
}

///////////////////////////////////////////////////////////////////////////////

void Point::operator/=( int val )
{
   x /= val;
   y /= val;
}

///////////////////////////////////////////////////////////////////////////////

float Point::distanceSqTo( const Point& rhs ) const
{
   const float dx = ( float ) ( rhs.x - x );
   const float dy = ( float ) ( rhs.y - y );
   return dx*dx + dy*dy;
}

///////////////////////////////////////////////////////////////////////////////

float Point::distanceTo( const Point& rhs ) const
{
   const float dx = ( float ) ( rhs.x - x );
   const float dy = ( float ) ( rhs.y - y );
   return ( float ) sqrt( dx*dx + dy*dy );
}

///////////////////////////////////////////////////////////////////////////////

float Point::lengthSq() const
{
   return ( float ) ( x*x + y*y );
}

///////////////////////////////////////////////////////////////////////////////

float Point::length() const
{
   return ( float ) sqrt( x*x + y*y );
}

///////////////////////////////////////////////////////////////////////////////

#endif // _POINT_H
