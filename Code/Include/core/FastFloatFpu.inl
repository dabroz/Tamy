#ifndef _FAST_FLOAT_H
#error "This file can only be included from FastFloat.h"
#else

#include <math.h>


///////////////////////////////////////////////////////////////////////////////

void FastFloat::operator=( const FastFloat& rhs )
{
   m_val = rhs.m_val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::operator=( const FastFloatStorage& rhs )
{
   m_val = rhs;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setFromFloat( float val )
{
   m_val = val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setFromInt( int val )
{
   m_val = (float)val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setFromByte( byte val )
{
   m_val = (float)val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setFromWord( word val )
{
   m_val = (float)val;
}

///////////////////////////////////////////////////////////////////////////////

float FastFloat::getFloat() const
{
   return m_val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setAdd( const FastFloat& a, const FastFloat& b )
{
   m_val = a.m_val + b.m_val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setSub( const FastFloat& a, const FastFloat& b )
{
   m_val = a.m_val - b.m_val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setMul( const FastFloat& a, const FastFloat& b )
{
   m_val = a.m_val * b.m_val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setDiv( const FastFloat& a, const FastFloat& b )
{
   m_val = a.m_val / b.m_val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::add( const FastFloat& a )
{
   m_val += a.m_val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::sub( const FastFloat& a )
{
   m_val -= a.m_val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::mul( const FastFloat& a )
{
   m_val *= a.m_val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::div( const FastFloat& a )
{
   m_val /= a.m_val;
}

///////////////////////////////////////////////////////////////////////////////

FastFloat FastFloat::operator+( const FastFloat& a ) const
{
   return m_val + a.m_val;
}

///////////////////////////////////////////////////////////////////////////////

FastFloat FastFloat::operator-( const FastFloat& a ) const
{
   return m_val - a.m_val;
}

///////////////////////////////////////////////////////////////////////////////

FastFloat FastFloat::operator*( const FastFloat& a ) const
{
   return m_val * a.m_val;
}

///////////////////////////////////////////////////////////////////////////////

FastFloat FastFloat::operator/( const FastFloat& a ) const
{
   return m_val / a.m_val;
}

///////////////////////////////////////////////////////////////////////////////

FastFloat& FastFloat::operator+=( const FastFloat& a )
{
   m_val += a.m_val;
   return *this;
}

///////////////////////////////////////////////////////////////////////////////

FastFloat& FastFloat::operator-=( const FastFloat& a )
{
   m_val -= a.m_val;
   return *this;
}

///////////////////////////////////////////////////////////////////////////////

FastFloat& FastFloat::operator*=( const FastFloat& a )
{
   m_val *= a.m_val;
   return *this;
}

///////////////////////////////////////////////////////////////////////////////

FastFloat& FastFloat::operator/=( const FastFloat& a )
{
   m_val /= a.m_val;
   return *this;
}

///////////////////////////////////////////////////////////////////////////////

FastFloat FastFloat::operator-() const
{
   return -m_val;
}

///////////////////////////////////////////////////////////////////////////////

bool FastFloat::operator<( const FastFloat& rhs ) const
{
   return m_val < rhs.m_val;
}

///////////////////////////////////////////////////////////////////////////////

bool FastFloat::operator<=( const FastFloat& rhs ) const
{
   return m_val <= rhs.m_val;
}

///////////////////////////////////////////////////////////////////////////////

bool FastFloat::operator>( const FastFloat& rhs ) const
{
   return m_val > rhs.m_val;
}

///////////////////////////////////////////////////////////////////////////////

bool FastFloat::operator>=( const FastFloat& rhs ) const
{
   return m_val >= rhs.m_val;
}

///////////////////////////////////////////////////////////////////////////////

bool FastFloat::operator==( const FastFloat& rhs ) const
{
   return m_val == rhs.m_val;
}

///////////////////////////////////////////////////////////////////////////////

bool FastFloat::operator!=( const FastFloat& rhs ) const
{
   return m_val != rhs.m_val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setMax( const FastFloat& a, const FastFloat& b )
{
   m_val = a.m_val > b.m_val ? a.m_val : b.m_val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setMin( const FastFloat& a, const FastFloat& b )
{
   m_val = a.m_val < b.m_val ? a.m_val : b.m_val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setClamped( const FastFloat& a, const FastFloat& minVal, const FastFloat& maxVal )
{
   float highBoundClamp = ( a.m_val < maxVal.m_val ) ? a.m_val : maxVal.m_val;
   m_val = ( minVal.m_val > highBoundClamp ) ? minVal.m_val : highBoundClamp;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setAbs( const FastFloat& a )
{
   m_val = ::abs( a.m_val );
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::abs()
{
   m_val = ::abs( m_val );
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setFlipSign( const FastFloat& a, const FastFloat& sign )
{
   m_val = sign.m_val >= 0 ? a.m_val : -a.m_val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setSign( const FastFloat& a )
{
   m_val = ( a.m_val >= 0 ? 1.0f : -1.0f );
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::sign()
{
   m_val = ( m_val >= 0 ? 1.0f : -1.0f );
}

///////////////////////////////////////////////////////////////////////////////

bool FastFloat::approxEqual( const FastFloat& a, const FastFloat& eps ) const
{
   return ::abs( m_val - a.m_val ) <= eps.m_val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setSqrt( const FastFloat& a )
{
   m_val = ::sqrt( a.m_val );
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::sqrt()
{
   m_val = ::sqrt( m_val );
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setReciprocal( const FastFloat& a )
{
   m_val = 1.0f / a.m_val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::reciprocal()
{
   m_val = 1.0f / m_val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setNeg( const FastFloat& a )
{
   m_val = -a.m_val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::neg()
{
   m_val = -m_val;
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::sin()
{
   m_val = ::sin( m_val );
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::cos()
{
   m_val = ::cos( m_val );
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setSin( const FastFloat& val )
{
   m_val = ::sin( val.m_val );
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setCos( const FastFloat& val )
{
   m_val = ::cos( val.m_val );
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::asin()
{
   m_val = ::asin( m_val );
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::acos()
{
   m_val = ::acos( m_val );
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setAsin( const FastFloat& val )
{
   m_val = ::asin( val.m_val );
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setAcos( const FastFloat& val )
{
   m_val = ::acos( val.m_val );
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::floor()
{
   m_val = ::floorf( m_val );
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setFloor( const FastFloat& rhs )
{
   m_val = ::floorf( rhs.m_val );
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::round()
{
   m_val = ::roundf( m_val );
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setRound( const FastFloat& rhs )
{
   m_val = ::roundf( rhs.m_val );
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::setFloatRemainder( const FastFloat& dividend, const FastFloat& divisor )
{
   m_val = dividend.m_val - ( divisor.m_val * ::roundf( dividend.m_val / divisor.m_val ) );
}

///////////////////////////////////////////////////////////////////////////////

void FastFloat::floatRemainder( const FastFloat& divisor )
{
   m_val = m_val - ( divisor.m_val * ::roundf( m_val / divisor.m_val ) );
}

///////////////////////////////////////////////////////////////////////////////

#endif // _FAST_FLOAT_H
