/// @file   core-AI/BlendTreeNode.h
/// @brief  base blend tree node
#pragma once

#include "core\ReflectionObject.h"
#include "core\Vector.h"
#include "core\Transform.h"
#include "core\RuntimeData.h"
#include <string>


///////////////////////////////////////////////////////////////////////////////

class BlendTreeListener;
class BlendTreePlayerListener;
class BlendTree;
class BlendTreeComposite;
class BlendTreePlayer;
class BlendTreeSyncProfile;
class BlendTreeNodeSyncProfile;

///////////////////////////////////////////////////////////////////////////////

/**
 * Base behavior tree node.
 */
class BlendTreeNode : public ReflectionObject
{
   DECLARE_ALLOCATOR( BlendTreeNode, AM_DEFAULT );
   DECLARE_CLASS();

public:
   enum State
   {
      Inactive,
      ToSynchronize,
      Active,
   };

protected:
   // static data
   BlendTree*                                m_tree;
   std::string                               m_name;
   Vector                                    m_positionOnLayout; // editor stuff, but we need to serialize it

   // runtime data
protected:
   TRuntimeVar< State >                      m_state;

private:
   TRuntimeVar< Transform* >                 m_generatedPose;
   TRuntimeVar< Transform >                  m_accumulatedMotion;
   TRuntimeVar< BlendTreeNodeSyncProfile* >  m_nodeSyncData;
   TRuntimeVar< float >                      m_playbackSpeed;

public:
   virtual ~BlendTreeNode() {}

   /**
    * Sets the instance of the tree that owns this node.
    *
    * @param tree
    */
   void setHostTree( BlendTree* tree );

   /**
    * Gives the node a new name
    *
    * @param nodeName
    */
   void setName( const char* nodeName );

   /**
    * Returns the node's name.
    */
   inline const std::string& getName() const { return m_name; }

   /**
    * Sets blocks position on the layout.
    */
   void setPosition( const Vector& position );

   /**
    * Returns block's position in the editor's layout.
    */
   inline const Vector& getPosition() const { return m_positionOnLayout; }

   /**
    * Returns the blend tree this node belongs to.
    */
   BlendTree* getBlendTree() const { return m_tree; }

   /**
    * Called in order to push the information about the tree structure to the specified listener.
    *
    * @param listener
    */
   virtual void pullStructure( BlendTreeListener* listener ) {}

   // -------------------------------------------------------------------------
   // Runtime execution
   // -------------------------------------------------------------------------
   
   /**
    * Initializes the node's runtime data layout.
    *
    * @param player
    */
   virtual void initializeLayout( BlendTreePlayer* player ) const;

   /**
    * Deinitializes the node's runtime data layout.
    *
    * @param player
    */
   virtual void deinitializeLayout( BlendTreePlayer* player ) const;

   // -------------------------------------------------------------------------
   // Runtime properties
   // -------------------------------------------------------------------------

   /**
    * Returns the state of the node.
    *
    * @param player
    */
   State getState( BlendTreePlayer* player ) const;

   /**
    * Returns the pose generated by this node.
    *
    * @param player
    */
   Transform* getGeneratedPose( BlendTreePlayer* player ) const;

   /**
    * Returns the motion accumulated by this node.
    *
    * @param player
    */
   Transform& getAccumulatedMotion( BlendTreePlayer* player ) const;

   /**
    * Call this method if you want to fill in node's synchronization profile for the current frame.
    *
    * @param player
    */
   BlendTreeNodeSyncProfile* accessSyncData( BlendTreePlayer* player ) const;

   /**
    * Call this method if you want to read the node's synchronization profile for the current frame.
    *
    * @param player
    */
   const BlendTreeNodeSyncProfile* getSyncData( BlendTreePlayer* player ) const;

   /**
    * Sets node's playback speed.
    *
    * @param player
    * @param speed
    */
   void setPlaybackSpeed( BlendTreePlayer* player, float speed ) const;

   /**
    * Returns node's playback speed.
    *
    * @param player
    */
   float getPlaybackSpeed( BlendTreePlayer* player ) const;

   // -------------------------------------------------------------------------
   // ReflectionObject implementation
   // -------------------------------------------------------------------------
   void onPropertyChanged( ReflectionProperty& property ) override;

protected:
   /**
    * Constructor.
    *
    * @param name
    */
   BlendTreeNode( const char* name = "New node" );

   /**
    * Called when the node becomes active.
    *
    * @param player
    */
   virtual void onActivateNode( BlendTreePlayer* player ) const {}

   /**
    * Called when the node becomes inactive.
    *
    * @param player
    */
   virtual void onDeactivateNode( BlendTreePlayer* player ) const {}

   /**
    * Updates node's logic that can for instance decide what children
    * to activate this frame etc.
    * 
    * @param player
    */
   virtual void onUpdateLogic( BlendTreePlayer* player ) const {}

   /**
    * Generates synchronization info that'll be used by the tree
    * later down the road to synchronize particular branches together.
    *
    * At this point the tree is out of sync - so you can't synchronize any nodes to it.
    * 
    * @param player
    * @param outSyncData
    */
   virtual void onGenerateTreeSyncProfile( BlendTreePlayer* player, BlendTreeSyncProfile& outSyncData ) const {}

   /**
    * Called after the tree synchronization profile was created. This method synchronizes
    * this node to the tree.
    *
    * At this point you are not allowed to change the tree sync profile any more.
    * 
    * @param player
    * @param syncData
    * @param outNodeSyncProfile
    */
   virtual void onSynchronizeNodeToTree( BlendTreePlayer* player, const BlendTreeSyncProfile& syncData, BlendTreeNodeSyncProfile& outNodeSyncProfile ) const {}

   /**
    * Samples the pose generated by this node.
    *
    * @param player
    * @param timeDelta
    * @param outGeneratedPoseDiffLS
    * @param bonesCount
    */
   virtual void onSamplePose( BlendTreePlayer* player, float timeDelta, Transform* outGeneratedPoseDiffLS, Transform& outAccMotion, uint bonesCount ) const {}

   /**
    * Called when a new host tree instance is set on the node.
    *
    * @param tree
    */
   virtual void onHostTreeSet( BlendTree* tree ) {}

   /**
    * Pulls the runtime structure of the tree node.
    *
    * @param player
    * @param listener
    */
   virtual void pullRuntimeStructure( BlendTreePlayer* player, BlendTreePlayerListener* listener ) const;

private:
   friend class BlendTreeComposite;
   friend class BlendTreePlayer;

   /**
    * Called when the node becomes active.
    *
    * @param player
    */
   virtual void activateNode( BlendTreePlayer* player ) const;

   /**
    * Called when the node becomes inactive.
    *
    * @param player
    */
   virtual void deactivateNode( BlendTreePlayer* player ) const;

   /**
    * Updates node's logic that can for instance decide what children
    * to activate this frame etc.
    * 
    * @param player
    */
   virtual void updateLogic( BlendTreePlayer* player ) const;

   /**
    * Generates synchronization profile that'll be used by the tree
    * later down the road to synchronize particular branches together.
    *
    * At this point the tree is out of sync - so you can't synchronize any nodes to it.
    * 
    * @param player
    * @param outSyncData
    */
   virtual void generateTreeSyncProfile( BlendTreePlayer* player, BlendTreeSyncProfile& outSyncData ) const;

   /**
    * Called after the tree synchronization profile was created. This method synchronizes
    * this node to the tree.
    *
    * At this point you are not allowed to change the tree sync profile any more.
    * 
    * @param player
    * @param syncData
    */
   virtual void synchronizeNodeToTree( BlendTreePlayer* player, const BlendTreeSyncProfile& syncData ) const;

   /**
    * Samples the pose generated by this node.
    *
    * @param player
    * @param timeDelta
    */
   virtual void samplePose( BlendTreePlayer* player, float timeDelta ) const;
};

///////////////////////////////////////////////////////////////////////////////
